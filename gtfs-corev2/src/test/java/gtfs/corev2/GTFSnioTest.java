/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package gtfs.corev2;

import org.junit.Assert;
import org.junit.Test;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import gtfs.corev2.nio.GTFSGraphBuilder;
import gtfs.corev2.nio.GraphSerializerBuilder;
import gtfs.corev2.nio.GraphSerializerBuilder.GraphSerializer;

import static org.junit.Assert.*;

import java.io.InputStream;
import java.util.Iterator;
import java.util.Map;

import org.jgrapht.Graph;


public class GTFSnioTest {
    @Test 
    public void testLocalGraphBuilder() {
        Graph<GTFSVertex, GTFSEdge> g = 
        		new GTFSGraphBuilder("mbta")
        		.localDataset()
        		.build();
        
        System.out.println("The graph has : "+g.vertexSet().size()+" vertices.");
        System.out.println("The graph has : "+g.edgeSet().size()+" edges.");
        
        /*
        Iterator<GTFSEdge> it = g.edgeSet().iterator();
        for (int i = 0; i < 10; i++) {
        	GTFSEdge e = it.next();
        	if (Double.isNaN(e.getWeight())) {
        		System.out.println("the NaN edge : "+e.toString());
        	}
        }
        */
        
        //serialization test (local)
        GraphSerializer gs = 
        	new GraphSerializerBuilder("mbta")
        	.localSerializer()
        	.build();
        
        gs.serialize(g);
        
        //serialization test (remote)
        //GraphSerializer gsRemote = 
        //	new GraphSerializerBuilder("mbta")
        //	.remoteSerializer()
        //	.build();
        
        //gsRemote.serialize(g);
        
        
        //unserialization test(local)        
        GraphSerializer gi =
        	new GraphSerializerBuilder("mbta")
        	.localSerializer()
        	.build();
        
        Graph<GTFSVertex, GTFSEdge> g3 = gi.unserialize();
        System.out.println("The unserialized local graph has : "+g3.vertexSet().size()+" vertices.");
        System.out.println("The unserialized local graph has : "+g3.edgeSet().size()+" edges.");
        
        //unserialization test(remote)
        GraphSerializer gir =
            	new GraphSerializerBuilder("mbta")
            	.remoteSerializer()
            	.build();
            
        Graph<GTFSVertex, GTFSEdge> g4 = gi.unserialize();
        System.out.println("The unserialized remote graph has : "+g4.vertexSet().size()+" vertices.");
        System.out.println("The unserialized remote graph has : "+g4.edgeSet().size()+" edges.");
        
        
        // Data integrity test :
        // test if the data in g and the ones in the unserialized versions are the same
        Assert.assertTrue((g.vertexSet().equals(g3.vertexSet())) && (g.vertexSet().equals(g4.vertexSet())));
        // not working (figure why)
        //Assert.assertTrue((g.edgeSet().equals(g3.edgeSet())) && (g.edgeSet().equals(g4.edgeSet())));
        /*
        int count = 0;
        for (GTFSEdge e : g3.edgeSet()) {
        	System.out.println(e.toString());
        	if (count >= 9) {
        		break;
        	}
        	count++;
        }
        */
        
    }
    
}
